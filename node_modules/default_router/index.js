//exports.metadata = require('./metadata.json');
var url 	= require('url');
var fs		= require('fs');
var ac		= require('ac');
var cache 	= require('cache');
var config_funcs 	= require('configuration');


var configuration = {
	'ac'		: 	ac,
	'caching'	: 	true,
};
exports.configuration = configuration;

config_funcs.alterConfig(cache.configuration, configuration);

var handlers = {
	request : { 
		'GET' 		: [], 
		'POST'		: [],
		'DELETE'	: [] 
	},
	statusCode : {
		404 : function(){}
	}
};

var defaultHandlers = {
	request : {
		'GET': [],
		'POST': [],
		'DELETE': []
	}
};

exports.get = function(condition, callback, extended_options){
	if(typeof condition == 'undefined' || typeof callback == 'undefined')
		return defaultHandlers.request.GET[0];
	handlers.request.GET.push({'condition' : condition, 'callback':callback});
};

exports.post = function(condition, callback, extended_options){
	if(typeof condition == 'undefined' || typeof callback == 'undefined')
		defaultHandlers.request.POST[0];
	handlers.request.POST.push({'condition' : condition, 'callback':callback});
};

exports.status = function(code, callback, extended_options){
	if(typeof callback== 'undefined'){
		return handlers.statusCode[code];
	}
	handlers.statusCode[code] = callback;
};

exports.requestHandler = function(request, response){
	var handlerArray = handlers.request[request.method];
	if(typeof handlerArray == 'undefined' || handlerArray == null){
		console.log('Bad request type:' + request.method);
		badRequestHandler(request, response);
		return;
	}
	else{
		var parsedURL = url.parse(request.url);
		for(var Index = handlerArray.length-1; Index >= 0; Index--){
			var handler = handlerArray[Index];
			if(handler.condition.constructor.name == "String"){
				if(handler.condition != parsedURL.pathname){
					continue;
				}
				handler.callback(request, response);
				return;
			}else if(handler.condition.constructor.name == "RegExp"){
				var matches = parsedURL.pathname.match(handler.condition);
				if(typeof matches =y= 'undefined'){
					continue;
				}
				request.params = matches;
				handler.callback(request, response);
				return;
			}else if(typeof handler.condition == 'function'){
				if(!handler.condition(request, parsedURL.pathname)){
					continue;
				}
				handler.callback(request, response);
				return;
			}
		}
		handlerArray = defaultHandlers.request[request.method];
		if(typeof handlerArray == 'undefined'){
			badRequestHandler(request, response);
			return;
		}else{
			for(var Index = handlerArray.length-1; Index >= 0; Index--){
				var handler = handlerArray[Index];
				if(handler.condition.constructor.name == "String"){
					if(handler.condition != parsedURL.pathname){
						continue;
					}
					handler.callback(request, response);
					return;
				}else if(handler.condition.constructor.name == "RegExp"){
					var matches = parsedURL.pathname.match(handler.condition);
					if(matches == null){
						continue;
					}
					request['params'] = matches;
					handler.callback(request, response);
					return;
				}else if(typeof handler.condition == 'function'){
					if(!handler.condition(request, parsedURL.pathname)){
						continue;
					}
					handler.callback(request, response);
					return;
				}
			}
		}
		badRequestHandler(request, response);
		return;
	}
};
//TODO: Add use of ac (access control) to...well...access....control

defaultHandlers.request['GET'].push(
	{
		condition : /(.*)/, 

		callback : function(request, response){
			var ret = cache.getUncached('.' + request.params[0]);
			if(ret.failed){
				response.writeHead(404, {"Content-Type": "text/html"});
				response.write("404! \'" + request.params[0] + "\' not found!");
				response.end();
				return;
			}else{
				response.writeHead(200, {"Content-Type": "text/html"});
				response.write(ret.content);
				response.end();
				return;
			}
		}
	});


defaultHandlers.request['GET'].push(
	{
		condition : /^(.*)\/$/, 

		callback : function(request, response){
			var ret = cache.getUncached('.' + request.params[0] + 'index.html');
			if(ret.failed){
				response.writeHead(404, {"Content-Type": "text/html"});
				response.write("404! no index found!");
				response.end();
				return;
			}else{
				response.writeHead(200, {"Content-Type": "text/html"});
				response.write(ret.content);
				response.end();
				return;
			}
		}
	});


var badRequestHandler = function(request, response){

};

